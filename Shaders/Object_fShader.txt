#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

uniform sampler2D diffuseTexture;

uniform vec3 viewPos;
uniform int nr_point_lights;

float constant = 1.0f;
float linear = 0.09f;		//0.09
float quadratic = 0.032f;  	//0.032

uniform vec3 lightPositions[100];
uniform bool color;
uniform bool light;
uniform vec3 objectColor;

vec3 CalcPointLight(vec3 lightPos, vec3 color, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{       
	/*
    vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;
    vec3 normal = normalize(fs_in.Normal);
    vec3 lightColor = vec3(0.3);
    // ambient
    vec3 ambient = 0.3 * color;
    // diffuse
    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // specular
    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
    vec3 specular = spec * lightColor;    
    // calculate shadow
    float shadow = ShadowCalculation(fs_in.FragPos);                      
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color;    
    
    FragColor = vec4(lighting, 1.0);
    //FragColor = vec4(vec3(closestDepth / far_plane), 1.0);	//debug
    */
    
    // properties
	vec3 norm = normalize(fs_in.Normal);
	vec3 viewDir = normalize(viewPos - fs_in.FragPos);
	vec3 Color;
	if (color)
	{
		Color = objectColor;
	}
	else
	{
    	Color = texture(diffuseTexture, fs_in.TexCoords).rgb;
    }
	vec3 result = Color * 0.3;
    if (!light)
    {
		for(int i = 0; i < nr_point_lights; i++)
			result += CalcPointLight(lightPositions[i], Color, norm, fs_in.FragPos, viewDir);
	}
	else
	{
		result = Color;
	}

    FragColor = vec4(result, 1.0);
    
    //FragColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);
}

vec3 CalcPointLight(vec3 lightPos, vec3 color, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightColor = vec3(0.3);
    vec3 lightDir = normalize(lightPos - fragPos);
    
    // ambient
    //vec3 ambient = 0.17 * color;
    
    // diffuse
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // specular
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    //vec3 halfwayDir = normalize(lightDir + viewDir);  
    spec = pow(max(dot(normal, reflectDir/*halfwayDir*/), 0.0), 64.0);
    vec3 specular = spec * lightColor;
    
    // attenuation
	float distance    = length(lightPos - fragPos);
	float attenuation = 1.0 / (1.0f + 0.09f * distance + 0.032f * (distance * distance));
	diffuse *= attenuation;
	specular *= attenuation; 
                        
    vec3 lighting = (diffuse + specular) * color;
    return lighting;
} 






